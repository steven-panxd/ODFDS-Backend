datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Verification {
  NOTVERIFIED
  VERIFIED
  NOTPASSED
}

enum CardType {
  VISA
  MASTERCARD
  DISCOVER
  AMEX
}

enum PaymentStatus {
  PENDING
  POSTED
  PAYING
  PAID
  REFUNDING
  REFUNDED
}

enum OrderStatus {
  ASSIGNED
  ACCEPTED
  PICKEDUP
  DELIVERED
  CANCELLED
}

model Driver {
  id Int @id @default(autoincrement())
  email String @unique
  phone String
  passwordHash String
  driverLicenseNumber String
  driverLicenseImage String
  verification Verification @default(NOTVERIFIED)
  status Boolean @default(false)
  firstName String
  lastName String?
  middleName String?
  receivedTransactions PaymentTransaction[]
  orders deliveryOrder[]
  stripeAccountId String
}

model Restaurant {
  id Int @id @default(autoincrement())
  email String @unique
  phone String
  passwordHash String
  name String
  verification Verification @default(NOTVERIFIED)
  street String
  city String
  state String
  zipCode String
  creditCards CreditCard[]
  sentTransactions PaymentTransaction[]
  orders deliveryOrder[]
  stripeCustomerId String
}

model CreditCard {
  id Int @id @default(autoincrement())
  cardNumber String
  name String
  street String
  city String
  state String
  zipCode String
  cvv String
  cardType CardType
  restaurantId Int
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  relatedTransactions PaymentTransaction[]
}

model PaymentTransaction {
  id Int @id @default(autoincrement())
  amount Decimal @db.Decimal(15, 2)
  status PaymentStatus @default(PENDING)
  payerId Int
  payeeId Int
  cardId Int
  payer Restaurant @relation(fields: [payerId], references: [id])
  payee Driver @relation(fields: [payeeId], references: [id])
  creditCard CreditCard @relation(fields: [cardId], references: [id])
  orders deliveryOrder[]
}

model deliveryOrder {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  estimatedDeliveryTime DateTime
  estimatedDeliveryCost Decimal @db.Decimal(15, 2)
  actualDeliveryTime DateTime?
  actualDeliveryCost Decimal? @db.Decimal(15, 2)
  status OrderStatus @default(ASSIGNED)
  customerStreet String
  customerCity String
  customerState String
  customerZipCode String
  customerName String
  customerEmail String
  customerPhone String
  restaurantId Int
  driverId Int?
  transactionId Int
  comment String?
  trace String? @db.Text
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  driver Driver? @relation(fields: [driverId], references: [id])
  transaction PaymentTransaction @relation(fields: [transactionId], references: [id])
}