#!/usr/bin/env node

// load .env configuration
require('dotenv').config();

// connect to MongoDB
var mongoose = require('mongoose');
mongoose.set("strictQuery", false);
let MONGO_DB_URI;
if (process.env.MONGO_DB_USER && process.env.MONGO_DB_PASSWORD) {
  MONGO_DB_URI = `mongodb://${process.env.MONGO_DB_USER}:${process.env.MONGO_DB_PASSWORD}@${process.env.MONGO_DB_HOST}:${process.env.MONGO_DB_DOCKER_PORT}/`;
} else {
  MONGO_DB_URI = `mongodb://${process.env.MONGO_DB_HOST}:${process.env.MONGO_DB_DOCKER_PORT}/`;
}

mongoose.connect(MONGO_DB_URI).then(async _ => {
  console.log('Connected to MongoDB');
  var driverLocation = require("../mongoose/schema/driverLocation");
  // clean up mongoose database once start
  await driverLocation.deleteMany({});
}).catch(error => {
  console.log(error.message);
  process.exit(1);
});


/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('odfds:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.NODE_DOCKER_PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Set up websocket
var expressWs = require('express-ws')(app, server);